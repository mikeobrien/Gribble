<#@ include file="Gribble.Core.ttinclude" #>
<#
    // Settings
    ConnectionStringName = "";              // Uses last connection string in config if not specified
    Namespace = "MyProject.Models";
    ClassPrefix = "";
    ClassSuffix = "";
    bool SplitIntoMultipleFiles = false;    // if true: Generates one file for every class
    bool MakeSingular = true;               // if true: Changes the classname to singular if tablename is not singular
    IncludeViews = true;
    bool GenerateConstructor = false;       // if true: Generates the default empty constructor 

    // Read schema
    var tables = LoadTables(MakeSingular);
/*
    // Tweak Schema
    tables["tablename"].Ignore = true;                          // To ignore a table
    tables["tablename"].ClassName = "newname";                  // To change the class name of a table
    tables["tablename"]["columnname"].Ignore = true;            // To ignore a column
    tables["tablename"]["columnname"].PropertyName="newname";   // To change the property name of a column
    tables["tablename"]["columnname"].PropertyType="bool";      // To change the property type of a column
*/

    // Generate output
    if (tables.Count>0)
    {
#>
<#
if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(Namespace)) Namespace="OrmLitePoco";
var manager = Manager.Create(Host, GenerationEnvironment);
manager.StartHeader(); #>// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel.DataAnnotations;

<#var tablesToGenerate = (from t in tables where !t.Ignore select t);#>
//Total Number of Classes Generated - <#=tablesToGenerate.Count()#>

namespace <#=Namespace #>
{
    public abstract partial class ModelBase
    {
        public abstract object GetPrimaryKeyValue();
        public abstract string GetPrimaryKeyName();
        public abstract void SetPrimaryKeyValue(object pkValue);
        public abstract string GetTableName();
    }

<#manager.EndBlock(); #>
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
manager.StartNewFile(tbl.Name + ".cs");
#>
    [Serializable]
    public partial class <#=tbl.ClassName#>: ModelBase 
    {
<# if (GenerateConstructor) { #>
        public <#=tbl.ClassName#>()
        {
        }
<# }
#>
        public const string TABLE_NAME = "<#=tbl.Name#>";
        
        public const string ALL_COLUMNS_FOR_SELECT = "*";

        #region ColumnNames
<#
    foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
    {#>
        public const string COLUMN_<#=col.PropertyName#> = "<#=col.Name#>";
<#
    }#>
        #endregion

        #region ColumnProperties
<#
foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{
 
    if (col.PropertyType == "string" && col.Size > 0) { #>
        [StringLength(<#=col.Size#>)]
<# }  #>
<#   if (col.IsNullable != true && col.IsAutoIncrement != true) { #>
        [Required]
<# } #>
        public <#=col.ProperPropertyType#> <#=col.PropertyName#> { get; set;}
<# } #>
        public Dictionary<string, object> Values { get; set; }
        #endregion

        #region OverloadedFunctions
        public override object GetPrimaryKeyValue()
        {
            <#if (tbl.HasPK()) { #>return <#= tbl.PK.PropertyName #>;<# } else { #>return null;<#}#> 
        }

        public override string GetPrimaryKeyName()
        {
            <#if (tbl.HasPK()) { #>return "<#= tbl.PK.PropertyName #>";<# } else { #>return null;<#}#> 
        }

        public override void SetPrimaryKeyValue(object pkValue)
        {
            <#if (tbl.HasPK()) { #><#= tbl.PK.PropertyName #> = (<#= tbl.PK.PropertyType#>)pkValue;<# } #> 
        }

        public override string GetTableName()
        {
            return "<#=tbl.Name#>";
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
<#
    foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
    {#>
            sb.AppendFormat("<#=col.PropertyName#> = {0} , ",<#=col.PropertyName#>);sb.AppendLine();
<#
    }#>
            return sb.ToString();
        }

        #endregion

    }
<#  manager.EndBlock(); #>
<# } #>	
<#manager.StartFooter(); #>
}
#pragma warning restore 1591
<#manager.EndBlock(); #>
<#manager.Process(SplitIntoMultipleFiles); #>
<# } #>

