<#@ include file="Gribble.Core.ttinclude" #>
<#
    // Settings
    ConnectionStringName = "";			// Uses last connection string in config if not specified
    Namespace = "MyProject.DB";
    ClassPrefix = "";
    ClassSuffix = "";

    // Read schema
    var sps = LoadSPs();

    // Generate output
    if (sps.Count>0)
    {
#>
<#
if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(Namespace)) Namespace="Gribble.SP";
#>
using System;
using System.Data.Common;
using System.Data;
using System.Collections.Generic;
using Gribble;
using Gribble.Mapping;

//Total Number of SP Functions Generated - <#=sps.Count()#>


namespace <#=Namespace #>
{
    public static class GribbleSPList
    {
<#foreach(var sp in sps){#>
        
        public static PreparedStoredProcedure <#=sp.Name#>(this GribbleSPList spList <#foreach(var param in sp.Parameters){#> , <#=param.NullableSysType#> <#=Inflector.MakeInitialLowerCase(param.Name)#>  = null <#}#>)
        {
            PreparedStoredProcedure sp = new PreparedStoredProcedure(spList);
            sp.Name = "<#=sp.Name#>";
            sp.Parameters = <# if(sp.Parameters.Count == 0 ) {#> null <# } else { #> new {<#bool start = true; foreach(var param in sp.Parameters){#> <#if (!start) { #>, <#} else { start = false;} #><#=param.Name#> = <#=Inflector.MakeInitialLowerCase(param.Name)#><#}#>}<# }#>;
            return sp;
        }

        public static PreparedStoredProcedure <#=sp.Name#>(this GribbleSPList spList, EntityMappingCollection mapping  <#foreach(var param in sp.Parameters){#> , <#=param.NullableSysType#> <#=Inflector.MakeInitialLowerCase(param.Name)#>  = null <#}#>)
        {
            PreparedStoredProcedure sp = new PreparedStoredProcedure(spList,mapping);
            sp.Name = "<#=sp.Name#>";
            sp.Parameters = <# if(sp.Parameters.Count == 0 ) {#> null <# } else { #> new {<#bool start = true; foreach(var param in sp.Parameters){#> <#if (!start) { #>, <#} else { start = false;} #><#=param.Name#> = <#=Inflector.MakeInitialLowerCase(param.Name)#><#}#>}<# }#>;
            return sp;
        }

<#}#>
    }
}
<# } #>

