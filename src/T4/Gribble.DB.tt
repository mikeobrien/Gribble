<#@ include file="Gribble.Core.ttinclude" #>
<#
    // Settings
    ConnectionStringName = "";			// Uses last connection string in config if not specified
    Namespace = "MyProject.DB";
    string PocoNamespace = "MyProject.Models";
    ClassPrefix = "";
    ClassSuffix = "";
    bool SplitIntoMultipleFiles = false;		// if true: Generates one file for every class
    bool MakeSingular = true;			// if true: Changes the classname to singular if tablename is not singular
    IncludeViews = true;
    bool UseIdAsPK = false;				// if true: Changes the primary key property name to Id
    bool GenerateConstructor = false;		// if true: Generates the default empty constructor 

    // Read schema
    var tables = LoadTables(MakeSingular);
/*
    // Tweak Schema
    tables["tablename"].Ignore = true;							// To ignore a table
    tables["tablename"].ClassName = "newname";					// To change the class name of a table
    tables["tablename"]["columnname"].Ignore = true;			// To ignore a column
    tables["tablename"]["columnname"].PropertyName="newname";	// To change the property name of a column
    tables["tablename"]["columnname"].PropertyType="bool";		// To change the property type of a column
*/

    // Generate output
    if (tables.Count>0)
    {
#>
<#
if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(Namespace)) Namespace="GribbleDB";#>// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using System.Configuration;
using Gribble.Mapping;
using Gribble;
using <#=PocoNamespace#>;

namespace <#=Namespace #>
{
    public class GribbleSPList
    {
        GribbleDB db;

        public ConnectionManager ConnectionManager {get{ return db.ConnectionManager;}}

        public GribbleSPList(GribbleDB db)
        {
            this.db = db;
        }
    }


    public class GribbleDB : IDisposable
    {
        private ConnectionManager connectionManager;
        public ConnectionManager ConnectionManager {get{ return connectionManager;}}
        private IProfiler profiler;

        private GribbleSPList sp;
        public GribbleSPList SP { get { return sp; } }
        

        public GribbleDB(ConnectionManager connectionManager, IProfiler profiler = null)
        {
            this.connectionManager = connectionManager;
            this.profiler = profiler ?? new NullProfiler();
            sp = new GribbleSPList(this);

        }

        public GribbleDB(string connectionString, IProfiler profiler = null)
        {
            this.connectionManager = new ConnectionManager(connectionString);
            this.profiler = profiler ?? new NullProfiler();
            sp = new GribbleSPList(this);
        }

        public static GribbleDB CreateFromConnectionName(string connectionStringName = "<#= ConnectionStringName #>", IProfiler profiler = null)
        {
            if (ConfigurationManager.ConnectionStrings[connectionStringName] == null)
            {
                throw new Exception("Connection Name not found in Config");
            }
            var connectionString = ConfigurationManager.ConnectionStrings[connectionStringName].ConnectionString;
            var connectionManager = new ConnectionManager(connectionString);
            return new GribbleDB(connectionManager,profiler);
        }        

        public void Dispose()
        {
            connectionManager.Dispose();
        }

        #region Table Properties
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
        public ITable<<#=tbl.ClassName#>> <#=tbl.ClassName#> {get { return new  Table<<#=tbl.ClassName#>>(connectionManager, "<#=tbl.Name#>",  <#=tbl.ClassName#>_EntityMapping, profiler); } }
<#
}
#>
        #endregion Table Properties

        #region MapConstants
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
        private static <#=tbl.ClassName#>Map <#=tbl.ClassName#>_ClassMap = new <#=tbl.ClassName#>Map();
        private static EntityMapping <#=tbl.ClassName#>_EntityMapping = new EntityMapping(new <#=tbl.ClassName#>Map());
<#
}
#>
        #endregion MapConstants

        private static EntityMappingCollection mapping = new EntityMappingCollection(new IClassMap[] { <#bool start = true; foreach(Table tbl in from t in tables where !t.Ignore select t) { #> <#if (!start) { #>, <#} else { start = false;} #> <#=tbl.ClassName#>_ClassMap<#}#> });
        public static EntityMappingCollection EntityMapping {get {return mapping;}}


<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
    public partial class <#=tbl.ClassName#>Map: ClassMap<<#=tbl.ClassName#>><#if (tbl.HasPK() && UseIdAsPK) { #> , IHasId<<#=tbl.PK.PropertyType#>><#}#> 
    {
        public <#=tbl.ClassName#>Map()
        {
    <#
    foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
    {
    if (col.IsPK){#>
            Id(x=>x.<#=col.PropertyName#>).Column("<#=col.Name#>")<# if (col.PropertyType == "Guid" && col.IsAutoIncrement) {  #>.Generated()<# }#>;
    <# } else { #>
            Map(x=>x.<#=col.PropertyName#>).Column("<#=col.Name#>");
    <# } #>
    <# } #>
        }
    }
<# } #>
}
}
#pragma warning restore 1591
<# } #>
