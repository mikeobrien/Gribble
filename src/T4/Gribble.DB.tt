<#@ include file="Gribble.Core.ttinclude" #>
<#
    // Settings
    ConnectionStringName = "";          // Uses last connection string in config if not specified
    Namespace = "MyProject.DB";
    string PocoNamespace = "MyProject.Models";
    ClassPrefix = "";
    ClassSuffix = "";
    bool MakeSingular = true;           // if true: Changes the classname to singular if tablename is not singular
    IncludeViews = true;
    bool UseIdAsPK = false;             // if true: Changes the primary key property name to Id

    // Read schema
    var tables = LoadTables(MakeSingular);
/*
    // Tweak Schema
    tables["tablename"].Ignore = true;                          // To ignore a table
    tables["tablename"].ClassName = "newname";                  // To change the class name of a table
    tables["tablename"]["columnname"].Ignore = true;            // To ignore a column
    tables["tablename"]["columnname"].PropertyName="newname";   // To change the property name of a column
    tables["tablename"]["columnname"].PropertyType="bool";      // To change the property type of a column
*/

    // Generate output
    if (tables.Count>0)
    {
#>
<#
if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(Namespace)) Namespace="GribbleDB";#>// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using System.Configuration;
using System.Data;
using System.Data.Common;
using Gribble;
using Gribble.Mapping;
using <#=PocoNamespace#>;

namespace <#=Namespace #>
{


    public class GribbleDB : BaseGribbleDB
    {

        public GribbleDB(ConnectionManager connectionManager, IProfiler profiler = null) :base(connectionManager, profiler)
        {
        }

        public GribbleDB(string connectionString, string providerName, IProfiler profiler = null):base(connectionString, providerName, profiler)
        {
        }

        public GribbleDB(string connectionString, DbProviderFactory provider, IProfiler profiler = null):base(connectionString, provider, profiler)
        {
        }

        public GribbleDB(IDbConnection connection, IProfiler profiler = null):base(connection, profiler)
        {
        }
        
        public GribbleDB(string connectionStringName, IProfiler profiler = null):base(connectionStringName, profiler)
        {
        }

        #region Table Properties
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
        public ITable<<#=tbl.ClassName#>> <#=tbl.ClassName#> {get { return new  Table<<#=tbl.ClassName#>>(_connectionManager, "<#=tbl.Name#>",  <#=tbl.ClassName#>_EntityMapping, _profiler); } }
<#
}
#>
        #endregion Table Properties

        #region MapConstants
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
        private static <#=tbl.ClassName#>Map <#=tbl.ClassName#>_ClassMap = new <#=tbl.ClassName#>Map();
        private static EntityMapping <#=tbl.ClassName#>_EntityMapping = new EntityMapping(new <#=tbl.ClassName#>Map());
<#
}
#>
        #endregion MapConstants

        private static EntityMappingCollection _mapping = new EntityMappingCollection(new IClassMap[] { <#bool start = true; foreach(Table tbl in from t in tables where !t.Ignore select t) { #> <#if (!start) { #>, <#} else { start = false;} #> <#=tbl.ClassName#>_ClassMap<#}#> });
        protected override EntityMappingCollection GetEntityMapping()
        {
            return _mapping;
        }

<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
        public partial class <#=tbl.ClassName#>Map: ClassMap<<#=tbl.ClassName#>><#if (tbl.HasPK() && UseIdAsPK) { #> , IHasId<<#=tbl.PK.PropertyType#>><#}#> 
        {
            public <#=tbl.ClassName#>Map()
            {
<#
    foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
    {
    if (col.IsPK){#>
                Id(x=>x.<#=col.PropertyName#>).Column("<#=col.Name#>")<# if (col.PropertyType == "Guid" && col.IsAutoIncrement) {  #>.Generated()<# }#>;
<# } else { #>
                Map(x=>x.<#=col.PropertyName#>).Column("<#=col.Name#>");
<# } #>
<# } #>
                Map(x => x.Values).Dynamic();
            }
        }
<# } #>
    }
}
#pragma warning restore 1591
<# } #>
