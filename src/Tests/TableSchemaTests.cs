using System;
using System.Data;
using System.Linq;
using Gribble;
using Gribble.Model;
using Gribble.TransactSql;
using NUnit.Framework;
using Should;

namespace Tests
{
    [TestFixture]
    public class TableSchemaTests
    {
        private static readonly TestDatabase Database =
            new TestDatabase("[id] [int] IDENTITY(1,1) NOT NULL, [name] [varchar] (500) NULL, [hide] [bit] NULL, [timestamp] [datetime] NULL",
                             10, "name, hide, [timestamp]", "'oh hai', 0, GETDATE()");

        public static IProfiler Profiler = new ConsoleProfiler();
        public ITableSchema GribbleDatabase;

        [OneTimeSetUp]
        public void Setup()
        {
            Database.SetUp();
            Database.CreateTables();
            GribbleDatabase = Gribble.TableSchema.Create(Database.Connection, profiler: Profiler);
        }

        [OneTimeTearDown]
        public void TearDown() { Database.TearDown(); }

        [SetUp]
        public void TestSetup() { Database.CreateTables(); }

        [Test]
        public void should_create_table()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            Gribble.TableSchema.Create(Database.Connection, profiler: Profiler).CreateTable(tableName,
                                    new Column("Id", typeof(Guid), key: Column.KeyType.PrimaryKey, isAutoGenerated: true),
                                    new Column("Name", typeof(string), isNullable: true, length: 500),
                                    new Column("Active", typeof(bool), isNullable: false, defaultValue: true),
                                    new Column("Score", typeof(decimal), isNullable: false, precision: 5, scale: 1),
                                    new Column("ScoreA", isNullable: false, computation: "Score * 55"),
                                    new Column("ScoreB", isNullable: false, computation: "Score * 55", computationPersisted: true),
                                    new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.tables WHERE name='{0}'", tableName).ShouldEqual(1);
        }

        [Test]
        public void should_create_table_with_identity()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey),
                new Column("Name", typeof(string), isNullable: true, length: 500),
                new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.tables WHERE name='{0}'", tableName).ShouldEqual(1);
        }

        [Test]
        public void should_create_table_with_specific_sql_type()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            var column = new Column("Name", sqlType: SqlDbType.VarChar, isNullable: true, length: 500);
            GribbleDatabase.CreateTable(tableName, column);

            Database.ExecuteScalar<byte>("SELECT system_type_id FROM sys.columns WHERE object_id = object_id('{0}') AND name='{1}'", 
                tableName, column.Name).ShouldEqual(column.SqlType.Value.GetSqlTypeId());
        }

        [Test]
        public void should_create_table_from_template()
        {
            var templateTableName = Guid.NewGuid().ToString();
            var newTableName = Guid.NewGuid().ToString();
            var database = Gribble.TableSchema.Create(Database.Connection, profiler: Profiler);
            database.CreateTable(templateTableName, 
                new Column("Id", typeof(Guid), key: Column.KeyType.ClusteredPrimaryKey, isAutoGenerated: true),
                new Column("Name", typeof(string), isNullable: true, length: 500),
                new Column("Active", typeof(bool), isNullable: false, defaultValue: true),
                new Column("Score", typeof(decimal), isNullable: false, precision: 5, scale: 1),
                new Column("ScoreA", isNullable: false, computation: "Score * 55"),
                new Column("ScoreB", isNullable: false, computation: "Score * 55", computationPersisted: true),
                new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));
            database.AddNonClusteredIndex(templateTableName, new Index.Column("Created", true), new Index.Column("Active"));

            database.CreateTable(newTableName, templateTableName);

            var templateColumns = database.GetColumns(templateTableName).ToList();
            var templateIndexes = database.GetIndexes(templateTableName).ToList();
            var columns = database.GetColumns(newTableName).ToList();
            var indexes = database.GetIndexes(newTableName).ToList();

            columns.Count.ShouldEqual(7);
            templateColumns.Count.ShouldEqual(7);
            var allColumns = columns.Join(templateColumns, x => x.Name, x => x.Name, (column, templateColumn) => new { column, templateColumn }).ToList();
            allColumns.Count.ShouldEqual(7);
            allColumns.All(x => x.column.IsEquivalent(x.templateColumn)).ShouldBeTrue();

            indexes.Count.ShouldEqual(2);
            templateIndexes.Count.ShouldEqual(2);
            indexes.Single(x => x.PrimaryKey).IsEquivalent(templateIndexes.Single(x => x.PrimaryKey));
            indexes.Single(x => !x.PrimaryKey).IsEquivalent(templateIndexes.Single(x => !x.PrimaryKey));
        }

        [Test]
        public void Should_rename_table()
        {
            var oldName = "Temp" + Guid.NewGuid().ToString("N");
            var newName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(oldName,
                new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey));

            Database.ExecuteScalar<int>($"SELECT COUNT(*) FROM sys.tables WHERE name='{oldName}'").ShouldEqual(1);

            GribbleDatabase.RenameTable(oldName, newName);

            Database.ExecuteScalar<int>($"SELECT COUNT(*) FROM sys.tables WHERE name='{oldName}'").ShouldEqual(0);
            Database.ExecuteScalar<int>($"SELECT COUNT(*) FROM sys.tables WHERE name='{newName}'").ShouldEqual(1);
        }

        [Test]
        public void Drop_Table_Test()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                                    new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey),
                                    new Column("Name", typeof(string), isNullable: true, length: 500),
                                    new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.tables WHERE name='{0}'", tableName).ShouldEqual(1);

            GribbleDatabase.DeleteTable(tableName);

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.tables WHERE name='{0}'", tableName).ShouldEqual(0);
        }

        [Test]
        public void should_get_table_info()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName, new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey));

            var tableInfo = GribbleDatabase.GetTableInfo(tableName);

            tableInfo.Name.ShouldEqual(tableName);
            tableInfo.ObjectId.ShouldBeGreaterThan(0);
            tableInfo.UsesAnsiNulls.ShouldBeTrue();
        }

        [Test]
        public void should_indicate_table_exists()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName, new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey));
            GribbleDatabase.TableExists(tableName).ShouldBeTrue();
        }

        [Test]
        public void should_indicate_table_does_not_exist()
        {
            GribbleDatabase.TableExists("yada").ShouldBeFalse();
        }

        [Test]
        public void should_get_table_columns()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.ClusteredPrimaryKey),
                new Column("Uid", typeof(Guid), isAutoGenerated: true),
                new Column("Name", typeof(string), isNullable: true, length: 500),
                new Column("Active", typeof(bool), defaultValue: true),
                new Column("Score", typeof(decimal), precision: 5, scale: 1),
                new Column("TotalScore", isNullable: false, computation: "Score * 55", computationPersisted: true),
                new Column("Created", typeof(DateTime), isAutoGenerated: true));

            var columns = GribbleDatabase.GetColumns(tableName).ToList();
            columns.Count.ShouldEqual(7);
            var column = columns[0];
            column.Computation.ShouldBeNull();
            column.ComputationPersisted.ShouldBeNull();
            column.DefaultValue.ShouldEqual("1");
            column.IsAutoGenerated.ShouldBeFalse();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)1);
            column.Name.ShouldEqual("Active");
            column.Precision.ShouldEqual((byte)1);
            column.Scale.ShouldEqual((byte)0);
            column.SqlType.ShouldEqual(SqlDbType.Bit);
            column.Type.ShouldEqual(typeof(bool));

            column = columns[1];
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeTrue();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeTrue();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)8);
            column.Name.ShouldEqual("Created");
            column.Precision.ShouldEqual((byte)23);
            column.Scale.ShouldEqual((byte)3);
            column.SqlType.ShouldEqual(SqlDbType.DateTime);
            column.Type.ShouldEqual(typeof(DateTime));

            column = columns[2];
            column.Computation.ShouldBeNull();
            column.ComputationPersisted.ShouldBeNull();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeFalse();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeTrue();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.ClusteredPrimaryKey);
            column.Length.ShouldEqual((short)4);
            column.Name.ShouldEqual("Id");
            column.Precision.ShouldEqual((byte)10);
            column.Scale.ShouldEqual((byte)0);
            column.SqlType.ShouldEqual(SqlDbType.Int);
            column.Type.ShouldEqual(typeof(int));

            column = columns[3];
            column.Computation.ShouldBeNull();
            column.ComputationPersisted.ShouldBeNull();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeFalse();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeTrue();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)500);
            column.Name.ShouldEqual("Name");
            column.Precision.ShouldEqual((byte)0);
            column.Scale.ShouldEqual((byte)0);
            column.SqlType.ShouldEqual(SqlDbType.NVarChar);
            column.Type.ShouldEqual(typeof(string));

            column = columns[4];
            column.Computation.ShouldBeNull();
            column.ComputationPersisted.ShouldBeNull();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeFalse();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)5);
            column.Name.ShouldEqual("Score");
            column.Precision.ShouldEqual((byte)5);
            column.Scale.ShouldEqual((byte)1);
            column.SqlType.ShouldEqual(SqlDbType.Decimal);
            column.Type.ShouldEqual(typeof(decimal));

            column = columns[5];
            column.Computation.ShouldEqual("([Score]*(55))");
            column.ComputationPersisted.Value.ShouldBeTrue();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeFalse();
            column.IsComputed.ShouldBeTrue();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)5);
            column.Name.ShouldEqual("TotalScore");
            column.Precision.ShouldEqual((byte)8);
            column.Scale.ShouldEqual((byte)1);
            column.SqlType.ShouldEqual(SqlDbType.Decimal);
            column.Type.ShouldEqual(typeof(decimal));

            column = columns[6];
            column.Computation.ShouldBeNull();
            column.ComputationPersisted.ShouldBeNull();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeTrue();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)16);
            column.Name.ShouldEqual("Uid");
            column.Precision.ShouldEqual((byte)0);
            column.Scale.ShouldEqual((byte)0);
            column.SqlType.ShouldEqual(SqlDbType.UniqueIdentifier);
            column.Type.ShouldEqual(typeof(Guid));
        }

        [Test]
        public void should_get_table_column()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.ClusteredPrimaryKey),
                new Column("Uid", typeof(Guid), isAutoGenerated: true),
                new Column("Name", typeof(string), isNullable: true, length: 500),
                new Column("Active", typeof(bool), defaultValue: true),
                new Column("Score", typeof(decimal), precision: 5, scale: 1),
                new Column("TotalScore", isNullable: false, computation: "Score * 55", computationPersisted: true),
                new Column("Created", typeof(DateTime), isAutoGenerated: true));

            var column = GribbleDatabase.GetColumn(tableName, "totalscore");

            column.Computation.ShouldEqual("([Score]*(55))");
            column.ComputationPersisted.Value.ShouldBeTrue();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeFalse();
            column.IsComputed.ShouldBeTrue();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)5);
            column.Name.ShouldEqual("TotalScore");
            column.Precision.ShouldEqual((byte)8);
            column.Scale.ShouldEqual((byte)1);
            column.SqlType.ShouldEqual(SqlDbType.Decimal);
            column.Type.ShouldEqual(typeof(decimal));
        }

        [Test]
        public void should_add_table_columns()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                                    new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.ClusteredPrimaryKey),
                                    new Column("Uid", typeof(Guid), isAutoGenerated: true),
                                    new Column("Created", typeof(DateTime), isAutoGenerated: true));

            GribbleDatabase.AddColumns(tableName,
                new Column("Uid", typeof(Guid), isAutoGenerated: true),
                new Column("Name", typeof(string), isNullable: true, length: 500));

            var columns = GribbleDatabase.GetColumns(tableName).ToList();

            columns.Count.ShouldEqual(4);
            var column = columns[0];
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeTrue();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeTrue();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)8);
            column.Name.ShouldEqual("Created");
            column.Precision.ShouldEqual((byte)23);
            column.Scale.ShouldEqual((byte)3);
            column.SqlType.ShouldEqual(SqlDbType.DateTime);
            column.Type.ShouldEqual(typeof(DateTime));

            column = columns[1];
            column.Computation.ShouldBeNull();
            column.ComputationPersisted.ShouldBeNull();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeFalse();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeTrue();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.ClusteredPrimaryKey);
            column.Length.ShouldEqual((short)4);
            column.Name.ShouldEqual("Id");
            column.Precision.ShouldEqual((byte)10);
            column.Scale.ShouldEqual((byte)0);
            column.SqlType.ShouldEqual(SqlDbType.Int);
            column.Type.ShouldEqual(typeof(int));

            column = columns[2];
            column.Computation.ShouldBeNull();
            column.ComputationPersisted.ShouldBeNull();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeFalse();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeTrue();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)500);
            column.Name.ShouldEqual("Name");
            column.Precision.ShouldEqual((byte)0);
            column.Scale.ShouldEqual((byte)0);
            column.SqlType.ShouldEqual(SqlDbType.NVarChar);
            column.Type.ShouldEqual(typeof(string));

            column = columns[3];
            column.Computation.ShouldBeNull();
            column.ComputationPersisted.ShouldBeNull();
            column.DefaultValue.ShouldBeNull();
            column.IsAutoGenerated.ShouldBeTrue();
            column.IsComputed.ShouldBeFalse();
            column.IsIdentity.ShouldBeFalse();
            column.IsNullable.ShouldBeFalse();
            column.Key.ShouldEqual(Column.KeyType.None);
            column.Length.ShouldEqual((short)16);
            column.Name.ShouldEqual("Uid");
            column.Precision.ShouldEqual((byte)0);
            column.Scale.ShouldEqual((byte)0);
            column.SqlType.ShouldEqual(SqlDbType.UniqueIdentifier);
            column.Type.ShouldEqual(typeof(Guid));
        }

        [Test]
        public void should_get_table_indexes()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                                    new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.ClusteredPrimaryKey),
                                    new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));
            GribbleDatabase.AddNonClusteredIndex(tableName, new Index.Column("Id"), new Index.Column("Created"));
            GribbleDatabase.AddNonClusteredIndex(tableName, new Index.Column("Created"));

            var indexes = GribbleDatabase.GetIndexes(tableName).ToList();
            indexes.Count.ShouldEqual(3);

            var index = indexes[2];
            index.Clustered.ShouldBeTrue();
            index.Columns.Count().ShouldEqual(1);
            index.Columns.First().Name.ShouldEqual("Id");
            index.Columns.First().Descending.ShouldBeFalse();
            index.Name.ShouldStartWith("PK_");
            index.Name.ShouldContain("_Id");
            index.PrimaryKey.ShouldBeTrue();
            index.Unique.ShouldBeTrue();

            index = indexes[1];
            index.Clustered.ShouldBeFalse();
            index.Columns.Count().ShouldEqual(2);
            index.Columns.First().Name.ShouldEqual("Id");
            index.Columns.First().Descending.ShouldBeFalse();
            index.Columns.Last().Name.ShouldEqual("Created");
            index.Columns.Last().Descending.ShouldBeFalse();
            index.Name.ShouldStartWith("IX_");
            index.Name.ShouldContain("_Id_Created");
            index.PrimaryKey.ShouldBeFalse();
            index.Unique.ShouldBeFalse();

            index = indexes[0];
            index.Clustered.ShouldBeFalse();
            index.Columns.Count().ShouldEqual(1);
            index.Columns.First().Name.ShouldEqual("Created");
            index.Columns.First().Descending.ShouldBeFalse();
            index.Name.ShouldStartWith("IX_");
            index.Name.ShouldContain("_Created");
            index.PrimaryKey.ShouldBeFalse();
            index.Unique.ShouldBeFalse();
        }

        [Test]
        public void should_add_table_indexes()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                                    new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.ClusteredPrimaryKey),
                                    new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));
            GribbleDatabase.AddNonClusteredIndex(tableName, new Index.Column("Id"), new Index.Column("Created"));
            GribbleDatabase.AddNonClusteredIndexes(tableName, new Index.ColumnSet { "Id", "Created" }, new Index.ColumnSet { "Created" }); 

            var indexes = GribbleDatabase.GetIndexes(tableName).ToList();
            indexes.Count.ShouldEqual(3);

            var index = indexes[2];
            index.Clustered.ShouldBeTrue();
            index.Columns.Count().ShouldEqual(1);
            index.Columns.First().Name.ShouldEqual("Id");
            index.Columns.First().Descending.ShouldBeFalse();
            index.Name.ShouldStartWith("PK_");
            index.Name.ShouldContain("_Id");
            index.PrimaryKey.ShouldBeTrue();
            index.Unique.ShouldBeTrue();

            index = indexes[1];
            index.Clustered.ShouldBeFalse();
            index.Columns.Count().ShouldEqual(2);
            index.Columns.First().Name.ShouldEqual("Id");
            index.Columns.First().Descending.ShouldBeFalse();
            index.Columns.Last().Name.ShouldEqual("Created");
            index.Columns.Last().Descending.ShouldBeFalse();
            index.Name.ShouldStartWith("IX_");
            index.Name.ShouldContain("_Id_Created");
            index.PrimaryKey.ShouldBeFalse();
            index.Unique.ShouldBeFalse();

            index = indexes[0];
            index.Clustered.ShouldBeFalse();
            index.Columns.Count().ShouldEqual(1);
            index.Columns.First().Name.ShouldEqual("Created");
            index.Columns.First().Descending.ShouldBeFalse();
            index.Name.ShouldStartWith("IX_");
            index.Name.ShouldContain("_Created");
            index.PrimaryKey.ShouldBeFalse();
            index.Unique.ShouldBeFalse();
        }

        [Test]
        public void Add_Column_Test()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                                    new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey),
                                    new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.columns WHERE name='Name' and object_id('{0}') = object_id", tableName).ShouldEqual(0);

            GribbleDatabase.AddColumn(tableName, 
                                    new Column("Name", typeof(string), isNullable: true, length: 500));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.columns WHERE name='Name' and object_id('{0}') = object_id", tableName).ShouldEqual(1);
        }

        [Test]
        public void Drop_Column_Test()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                                    new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey),
                                    new Column("Name", typeof(string), isNullable: true, length: 500),
                                    new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.columns WHERE name='Name' and object_id('{0}') = object_id", tableName).ShouldEqual(1);

            GribbleDatabase.RemoveColumn(tableName, "Name");

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.columns WHERE name='Name' and object_id('{0}') = object_id", tableName).ShouldEqual(0);
        }

        [Test]
        public void Add_Index_Test()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                                    new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey),
                                    new Column("Name", typeof(string), isNullable: true, length: 500),
                                    new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.indexes WHERE name='IX_{0}_Name_Created' and object_id('{0}') = object_id", tableName).ShouldEqual(0);

            GribbleDatabase.AddNonClusteredIndex(tableName, new Index.Column("Name"), new Index.Column("Created"));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.indexes WHERE name='IX_{0}_Name_Created' and object_id('{0}') = object_id", tableName).ShouldEqual(1);
        }

        [Test]
        public void Should_add_named_index()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey),
                new Column("Name", typeof(string), isNullable: true, length: 500),
                new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.indexes WHERE name='IX_{0}_Name_Created' and object_id('{0}') = object_id", tableName).ShouldEqual(0);

            GribbleDatabase.AddNonClusteredIndex(tableName, "Fark_Index", new Index.Column("Name"), new Index.Column("Created"));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.indexes WHERE name='Fark_Index' and object_id('{0}') = object_id", tableName).ShouldEqual(1);
        }

        [Test]
        public void Drop_Index_Test()
        {
            var tableName = "Temp" + Guid.NewGuid().ToString("N");
            GribbleDatabase.CreateTable(tableName,
                                    new Column("Id", typeof(int), isIdentity: true, key: Column.KeyType.PrimaryKey),
                                    new Column("Name", typeof(string), isNullable: true, length: 500),
                                    new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.indexes WHERE name='IX_{0}_Name_Created' and object_id('{0}') = object_id", tableName).ShouldEqual(0);

            GribbleDatabase.AddNonClusteredIndex(tableName, new Index.Column("Name"), new Index.Column("Created"));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.indexes WHERE name='IX_{0}_Name_Created' and object_id('{0}') = object_id", tableName).ShouldEqual(1);

            GribbleDatabase.RemoveNonClusteredIndex(tableName, string.Format("IX_{0}_Name_Created", tableName));

            Database.ExecuteScalar<int>("SELECT COUNT(*) FROM sys.indexes WHERE name='IX_{0}_Name_Created' and object_id('{0}') = object_id", tableName).ShouldEqual(0);
        }
    }
}
